#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
#1: 1
#3: 1,3
#6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

find = 7
f = 1
n = 1
tn = int(n * (n + 1) / 2)
tn2 = int(tn/2)
while f < find:
 n += 1
 for i in range(1,tn2):
   if tn % i == 0:
    f += 1
    if f >= find:
     break
print(tn,n,f)


#Process: So I'm thinking I'm going to loop ns and check number of divisors for each trianglenumber,
#but it's getting messy real fast. Had a code working with the example, but it's no use for bigger numbers(again).
#...Some hours later still having problem writing efficient code. There may be something fundamentally
#inefficient in how I'm thinking of solving this problem.
